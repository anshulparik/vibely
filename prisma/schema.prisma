generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  email          String   @unique
  password       String
  role           String   @default("user")
  authProviderId String?
  avatarURL      String?
  coverURL       String?
  firstName      String?
  lastName       String?
  description    String?
  location       String?
  school         String?
  work           String?
  website        String?
  createdAt      DateTime @default(now())

  // relations
  posts    Post[] // no key
  likes    Like[]
  comments Comment[]
  story    Story?

  followers  Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")

  senders   FollowRequest[] @relation("FollowRequestsSent")
  receivers FollowRequest[] @relation("FollowRequestsReceived")

  Blocker Block[] @relation("Blocker")
  Blocked Block[] @relation("Blocked")
}

model Post {
  id          Int      @id @default(autoincrement())
  postURL     String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // no key
  userId Int // key

  likes    Like[]
  comments Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Comment {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  likes Like[]
}

model Follower {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relations
  follower   User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int

  following   User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
}

model FollowRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relations
  sender   User @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId Int

  receiver   User @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relations
  blocker   User @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId Int

  blocked   User @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId Int

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  storyURL  String
  createdAt DateTime @default(now())
  expiresAt DateTime

  // relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

// npx prisma db push
// npx prisma studio
